package main

/*
// Generated by rust2go. Please DO NOT edit this C part manually.

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct FreeGoScriptInterpreterRequestRef {
  int32_t ptr_offset;
} FreeGoScriptInterpreterRequestRef;

typedef struct StringRef {
  const uint8_t *ptr;
  uintptr_t len;
} StringRef;

typedef struct FreeGoScriptInterpreterResponseRef {
  struct StringRef error;
} FreeGoScriptInterpreterResponseRef;

typedef struct ListRef {
  const void *ptr;
  uintptr_t len;
} ListRef;

typedef struct MapInStrOutStrRequestRef {
  int32_t ptr_offset;
  struct StringRef value;
} MapInStrOutStrRequestRef;

typedef struct MapInStrOutStrResponseRef {
  struct StringRef error;
  struct StringRef value;
} MapInStrOutStrResponseRef;

typedef struct NewGoScriptInterpreterRequestRef {
  struct StringRef script;
  struct StringRef function;
} NewGoScriptInterpreterRequestRef;

typedef struct NewGoScriptInterpreterResponseRef {
  struct StringRef error;
  int32_t ptr_offset;
} NewGoScriptInterpreterResponseRef;
*/
import "C"
import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/ihciah/rust2go/asmcall"
)

var GoScriptCallImpl GoScriptCall

type GoScriptCall interface {
	new_interpreter(req *NewGoScriptInterpreterRequest) NewGoScriptInterpreterResponse
	free_interpreter(req *FreeGoScriptInterpreterRequest) FreeGoScriptInterpreterResponse
	map_in_str_out_str(req *MapInStrOutStrRequest) MapInStrOutStrResponse
}

//export CGoScriptCall_new_interpreter
func CGoScriptCall_new_interpreter(req C.NewGoScriptInterpreterRequestRef, slot *C.void, cb *C.void) {
	_new_req := newNewGoScriptInterpreterRequest(req)
	resp := GoScriptCallImpl.new_interpreter(&_new_req)
	resp_ref, buffer := cvt_ref(cntNewGoScriptInterpreterResponse, refNewGoScriptInterpreterResponse)(&resp)
	asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
	runtime.KeepAlive(resp_ref)
	runtime.KeepAlive(resp)
	runtime.KeepAlive(buffer)
}

//export CGoScriptCall_free_interpreter
func CGoScriptCall_free_interpreter(req C.FreeGoScriptInterpreterRequestRef, slot *C.void, cb *C.void) {
	_new_req := newFreeGoScriptInterpreterRequest(req)
	resp := GoScriptCallImpl.free_interpreter(&_new_req)
	resp_ref, buffer := cvt_ref(cntFreeGoScriptInterpreterResponse, refFreeGoScriptInterpreterResponse)(&resp)
	asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
	runtime.KeepAlive(resp_ref)
	runtime.KeepAlive(resp)
	runtime.KeepAlive(buffer)
}

//export CGoScriptCall_map_in_str_out_str
func CGoScriptCall_map_in_str_out_str(req C.MapInStrOutStrRequestRef, slot *C.void, cb *C.void) {
	_new_req := newMapInStrOutStrRequest(req)
	resp := GoScriptCallImpl.map_in_str_out_str(&_new_req)
	resp_ref, buffer := cvt_ref(cntMapInStrOutStrResponse, refMapInStrOutStrResponse)(&resp)
	asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
	runtime.KeepAlive(resp_ref)
	runtime.KeepAlive(resp)
	runtime.KeepAlive(buffer)
}

// An alternative impl of unsafe.String for go1.18
func unsafeString(ptr *byte, length int) string {
	sliceHeader := &reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(ptr)),
		Len:  length,
		Cap:  length,
	}
	return *(*string)(unsafe.Pointer(sliceHeader))
}

// An alternative impl of unsafe.StringData for go1.18
func unsafeStringData(s string) *byte {
	return (*byte)(unsafe.Pointer((*reflect.StringHeader)(unsafe.Pointer(&s)).Data))
}
func newString(s_ref C.StringRef) string {
	return unsafeString((*byte)(unsafe.Pointer(s_ref.ptr)), int(s_ref.len))
}
func refString(s *string, _ *[]byte) C.StringRef {
	return C.StringRef{
		ptr: (*C.uint8_t)(unsafeStringData(*s)),
		len: C.uintptr_t(len(*s)),
	}
}

func ownString(s_ref C.StringRef) string {
	return string(unsafe.Slice((*byte)(unsafe.Pointer(s_ref.ptr)), int(s_ref.len)))
}
func cntString(_ *string, _ *uint) [0]C.StringRef { return [0]C.StringRef{} }
func new_list_mapper[T1, T2 any](f func(T1) T2) func(C.ListRef) []T2 {
	return func(x C.ListRef) []T2 {
		input := unsafe.Slice((*T1)(unsafe.Pointer(x.ptr)), x.len)
		output := make([]T2, len(input))
		for i, v := range input {
			output[i] = f(v)
		}
		return output
	}
}
func new_list_mapper_primitive[T1, T2 any](_ func(T1) T2) func(C.ListRef) []T2 {
	return func(x C.ListRef) []T2 {
		return unsafe.Slice((*T2)(unsafe.Pointer(x.ptr)), x.len)
	}
}

// only handle non-primitive type T
func cnt_list_mapper[T, R any](f func(s *T, cnt *uint) [0]R) func(s *[]T, cnt *uint) [0]C.ListRef {
	return func(s *[]T, cnt *uint) [0]C.ListRef {
		for _, v := range *s {
			f(&v, cnt)
		}
		*cnt += uint(len(*s)) * size_of[R]()
		return [0]C.ListRef{}
	}
}

// only handle primitive type T
func cnt_list_mapper_primitive[T, R any](_ func(s *T, cnt *uint) [0]R) func(s *[]T, cnt *uint) [0]C.ListRef {
	return func(s *[]T, cnt *uint) [0]C.ListRef { return [0]C.ListRef{} }
}

// only handle non-primitive type T
func ref_list_mapper[T, R any](f func(s *T, buffer *[]byte) R) func(s *[]T, buffer *[]byte) C.ListRef {
	return func(s *[]T, buffer *[]byte) C.ListRef {
		if len(*buffer) == 0 {
			return C.ListRef{
				ptr: unsafe.Pointer(nil),
				len: C.uintptr_t(len(*s)),
			}
		}
		ret := C.ListRef{
			ptr: unsafe.Pointer(&(*buffer)[0]),
			len: C.uintptr_t(len(*s)),
		}
		children_bytes := int(size_of[R]()) * len(*s)
		children := (*buffer)[:children_bytes]
		*buffer = (*buffer)[children_bytes:]
		for _, v := range *s {
			child := f(&v, buffer)
			len := unsafe.Sizeof(child)
			copy(children, unsafe.Slice((*byte)(unsafe.Pointer(&child)), len))
			children = children[len:]
		}
		return ret
	}
}

// only handle primitive type T
func ref_list_mapper_primitive[T, R any](_ func(s *T, buffer *[]byte) R) func(s *[]T, buffer *[]byte) C.ListRef {
	return func(s *[]T, buffer *[]byte) C.ListRef {
		if len(*s) == 0 {
			return C.ListRef{
				ptr: unsafe.Pointer(nil),
				len: C.uintptr_t(0),
			}
		}
		return C.ListRef{
			ptr: unsafe.Pointer(&(*s)[0]),
			len: C.uintptr_t(len(*s)),
		}
	}
}
func size_of[T any]() uint {
	var t T
	return uint(unsafe.Sizeof(t))
}
func cvt_ref[R, CR any](cnt_f func(s *R, cnt *uint) [0]CR, ref_f func(p *R, buffer *[]byte) CR) func(p *R) (CR, []byte) {
	return func(p *R) (CR, []byte) {
		var cnt uint
		cnt_f(p, &cnt)
		buffer := make([]byte, cnt)
		return ref_f(p, &buffer), buffer
	}
}
func cvt_ref_cap[R, CR any](cnt_f func(s *R, cnt *uint) [0]CR, ref_f func(p *R, buffer *[]byte) CR, add_cap uint) func(p *R) (CR, []byte) {
	return func(p *R) (CR, []byte) {
		var cnt uint
		cnt_f(p, &cnt)
		buffer := make([]byte, cnt, cnt+add_cap)
		return ref_f(p, &buffer), buffer
	}
}

func newC_uint8_t(n C.uint8_t) uint8    { return uint8(n) }
func newC_uint16_t(n C.uint16_t) uint16 { return uint16(n) }
func newC_uint32_t(n C.uint32_t) uint32 { return uint32(n) }
func newC_uint64_t(n C.uint64_t) uint64 { return uint64(n) }
func newC_int8_t(n C.int8_t) int8       { return int8(n) }
func newC_int16_t(n C.int16_t) int16    { return int16(n) }
func newC_int32_t(n C.int32_t) int32    { return int32(n) }
func newC_int64_t(n C.int64_t) int64    { return int64(n) }
func newC_bool(n C.bool) bool           { return bool(n) }
func newC_uintptr_t(n C.uintptr_t) uint { return uint(n) }
func newC_intptr_t(n C.intptr_t) int    { return int(n) }
func newC_float(n C.float) float32      { return float32(n) }
func newC_double(n C.double) float64    { return float64(n) }

func cntC_uint8_t(_ *uint8, _ *uint) [0]C.uint8_t    { return [0]C.uint8_t{} }
func cntC_uint16_t(_ *uint16, _ *uint) [0]C.uint16_t { return [0]C.uint16_t{} }
func cntC_uint32_t(_ *uint32, _ *uint) [0]C.uint32_t { return [0]C.uint32_t{} }
func cntC_uint64_t(_ *uint64, _ *uint) [0]C.uint64_t { return [0]C.uint64_t{} }
func cntC_int8_t(_ *int8, _ *uint) [0]C.int8_t       { return [0]C.int8_t{} }
func cntC_int16_t(_ *int16, _ *uint) [0]C.int16_t    { return [0]C.int16_t{} }
func cntC_int32_t(_ *int32, _ *uint) [0]C.int32_t    { return [0]C.int32_t{} }
func cntC_int64_t(_ *int64, _ *uint) [0]C.int64_t    { return [0]C.int64_t{} }
func cntC_bool(_ *bool, _ *uint) [0]C.bool           { return [0]C.bool{} }
func cntC_uintptr_t(_ *uint, _ *uint) [0]C.uintptr_t { return [0]C.uintptr_t{} }
func cntC_intptr_t(_ *int, _ *uint) [0]C.intptr_t    { return [0]C.intptr_t{} }
func cntC_float(_ *float32, _ *uint) [0]C.float      { return [0]C.float{} }
func cntC_double(_ *float64, _ *uint) [0]C.double    { return [0]C.double{} }

func refC_uint8_t(p *uint8, _ *[]byte) C.uint8_t    { return C.uint8_t(*p) }
func refC_uint16_t(p *uint16, _ *[]byte) C.uint16_t { return C.uint16_t(*p) }
func refC_uint32_t(p *uint32, _ *[]byte) C.uint32_t { return C.uint32_t(*p) }
func refC_uint64_t(p *uint64, _ *[]byte) C.uint64_t { return C.uint64_t(*p) }
func refC_int8_t(p *int8, _ *[]byte) C.int8_t       { return C.int8_t(*p) }
func refC_int16_t(p *int16, _ *[]byte) C.int16_t    { return C.int16_t(*p) }
func refC_int32_t(p *int32, _ *[]byte) C.int32_t    { return C.int32_t(*p) }
func refC_int64_t(p *int64, _ *[]byte) C.int64_t    { return C.int64_t(*p) }
func refC_bool(p *bool, _ *[]byte) C.bool           { return C.bool(*p) }
func refC_uintptr_t(p *uint, _ *[]byte) C.uintptr_t { return C.uintptr_t(*p) }
func refC_intptr_t(p *int, _ *[]byte) C.intptr_t    { return C.intptr_t(*p) }
func refC_float(p *float32, _ *[]byte) C.float      { return C.float(*p) }
func refC_double(p *float64, _ *[]byte) C.double    { return C.double(*p) }

type NewGoScriptInterpreterRequest struct {
	script   string
	function string
}

func newNewGoScriptInterpreterRequest(p C.NewGoScriptInterpreterRequestRef) NewGoScriptInterpreterRequest {
	return NewGoScriptInterpreterRequest{
		script:   newString(p.script),
		function: newString(p.function),
	}
}
func ownNewGoScriptInterpreterRequest(p C.NewGoScriptInterpreterRequestRef) NewGoScriptInterpreterRequest {
	return NewGoScriptInterpreterRequest{
		script:   ownString(p.script),
		function: ownString(p.function),
	}
}
func cntNewGoScriptInterpreterRequest(s *NewGoScriptInterpreterRequest, cnt *uint) [0]C.NewGoScriptInterpreterRequestRef {
	_ = s
	_ = cnt
	return [0]C.NewGoScriptInterpreterRequestRef{}
}
func refNewGoScriptInterpreterRequest(p *NewGoScriptInterpreterRequest, buffer *[]byte) C.NewGoScriptInterpreterRequestRef {
	return C.NewGoScriptInterpreterRequestRef{
		script:   refString(&p.script, buffer),
		function: refString(&p.function, buffer),
	}
}

type NewGoScriptInterpreterResponse struct {
	error      string
	ptr_offset int32
}

func newNewGoScriptInterpreterResponse(p C.NewGoScriptInterpreterResponseRef) NewGoScriptInterpreterResponse {
	return NewGoScriptInterpreterResponse{
		error:      newString(p.error),
		ptr_offset: newC_int32_t(p.ptr_offset),
	}
}
func ownNewGoScriptInterpreterResponse(p C.NewGoScriptInterpreterResponseRef) NewGoScriptInterpreterResponse {
	return NewGoScriptInterpreterResponse{
		error:      ownString(p.error),
		ptr_offset: newC_int32_t(p.ptr_offset),
	}
}
func cntNewGoScriptInterpreterResponse(s *NewGoScriptInterpreterResponse, cnt *uint) [0]C.NewGoScriptInterpreterResponseRef {
	_ = s
	_ = cnt
	return [0]C.NewGoScriptInterpreterResponseRef{}
}
func refNewGoScriptInterpreterResponse(p *NewGoScriptInterpreterResponse, buffer *[]byte) C.NewGoScriptInterpreterResponseRef {
	return C.NewGoScriptInterpreterResponseRef{
		error:      refString(&p.error, buffer),
		ptr_offset: refC_int32_t(&p.ptr_offset, buffer),
	}
}

type FreeGoScriptInterpreterRequest struct {
	ptr_offset int32
}

func newFreeGoScriptInterpreterRequest(p C.FreeGoScriptInterpreterRequestRef) FreeGoScriptInterpreterRequest {
	return FreeGoScriptInterpreterRequest{
		ptr_offset: newC_int32_t(p.ptr_offset),
	}
}
func ownFreeGoScriptInterpreterRequest(p C.FreeGoScriptInterpreterRequestRef) FreeGoScriptInterpreterRequest {
	return FreeGoScriptInterpreterRequest{
		ptr_offset: newC_int32_t(p.ptr_offset),
	}
}
func cntFreeGoScriptInterpreterRequest(s *FreeGoScriptInterpreterRequest, cnt *uint) [0]C.FreeGoScriptInterpreterRequestRef {
	_ = s
	_ = cnt
	return [0]C.FreeGoScriptInterpreterRequestRef{}
}
func refFreeGoScriptInterpreterRequest(p *FreeGoScriptInterpreterRequest, buffer *[]byte) C.FreeGoScriptInterpreterRequestRef {
	return C.FreeGoScriptInterpreterRequestRef{
		ptr_offset: refC_int32_t(&p.ptr_offset, buffer),
	}
}

type FreeGoScriptInterpreterResponse struct {
	error string
}

func newFreeGoScriptInterpreterResponse(p C.FreeGoScriptInterpreterResponseRef) FreeGoScriptInterpreterResponse {
	return FreeGoScriptInterpreterResponse{
		error: newString(p.error),
	}
}
func ownFreeGoScriptInterpreterResponse(p C.FreeGoScriptInterpreterResponseRef) FreeGoScriptInterpreterResponse {
	return FreeGoScriptInterpreterResponse{
		error: ownString(p.error),
	}
}
func cntFreeGoScriptInterpreterResponse(s *FreeGoScriptInterpreterResponse, cnt *uint) [0]C.FreeGoScriptInterpreterResponseRef {
	_ = s
	_ = cnt
	return [0]C.FreeGoScriptInterpreterResponseRef{}
}
func refFreeGoScriptInterpreterResponse(p *FreeGoScriptInterpreterResponse, buffer *[]byte) C.FreeGoScriptInterpreterResponseRef {
	return C.FreeGoScriptInterpreterResponseRef{
		error: refString(&p.error, buffer),
	}
}

type MapInStrOutStrRequest struct {
	ptr_offset int32
	value      string
}

func newMapInStrOutStrRequest(p C.MapInStrOutStrRequestRef) MapInStrOutStrRequest {
	return MapInStrOutStrRequest{
		ptr_offset: newC_int32_t(p.ptr_offset),
		value:      newString(p.value),
	}
}
func ownMapInStrOutStrRequest(p C.MapInStrOutStrRequestRef) MapInStrOutStrRequest {
	return MapInStrOutStrRequest{
		ptr_offset: newC_int32_t(p.ptr_offset),
		value:      ownString(p.value),
	}
}
func cntMapInStrOutStrRequest(s *MapInStrOutStrRequest, cnt *uint) [0]C.MapInStrOutStrRequestRef {
	_ = s
	_ = cnt
	return [0]C.MapInStrOutStrRequestRef{}
}
func refMapInStrOutStrRequest(p *MapInStrOutStrRequest, buffer *[]byte) C.MapInStrOutStrRequestRef {
	return C.MapInStrOutStrRequestRef{
		ptr_offset: refC_int32_t(&p.ptr_offset, buffer),
		value:      refString(&p.value, buffer),
	}
}

type MapInStrOutStrResponse struct {
	error string
	value string
}

func newMapInStrOutStrResponse(p C.MapInStrOutStrResponseRef) MapInStrOutStrResponse {
	return MapInStrOutStrResponse{
		error: newString(p.error),
		value: newString(p.value),
	}
}
func ownMapInStrOutStrResponse(p C.MapInStrOutStrResponseRef) MapInStrOutStrResponse {
	return MapInStrOutStrResponse{
		error: ownString(p.error),
		value: ownString(p.value),
	}
}
func cntMapInStrOutStrResponse(s *MapInStrOutStrResponse, cnt *uint) [0]C.MapInStrOutStrResponseRef {
	_ = s
	_ = cnt
	return [0]C.MapInStrOutStrResponseRef{}
}
func refMapInStrOutStrResponse(p *MapInStrOutStrResponse, buffer *[]byte) C.MapInStrOutStrResponseRef {
	return C.MapInStrOutStrResponseRef{
		error: refString(&p.error, buffer),
		value: refString(&p.value, buffer),
	}
}
func main() {}
